
MaP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000006da  0000076e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  00800102  00800102  00000770  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc6  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf1  00000000  00000000  00001826  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000797  00000000  00000000  00002417  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00002bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065d  00000000  00000000  00002d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000638  00000000  00000000  000033b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000039ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__vector_1>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_31>
  80:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_32>
  84:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_33>
  88:	0c 94 8c 01 	jmp	0x318	; 0x318 <__vector_34>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea ed       	ldi	r30, 0xDA	; 218
  c0:	f6 e0       	ldi	r31, 0x06	; 6
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 30       	cpi	r26, 0x02	; 2
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a2 e0       	ldi	r26, 0x02	; 2
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a6 35       	cpi	r26, 0x56	; 86
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 61 02 	call	0x4c2	; 0x4c2 <main>
  e2:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <send_mts>:
	while(TIMSK3 & (1<<OCIE3B));
	while(TIMSK3 & (1<<OCIE3C));
	while(TIMSK3 & (1<<TOIE3));
	while(TIMSK3 & (1<<ICIE3));*/
	return(f_CNT+1);	//Was geb ich zurück???
}
  ea:	8e 98       	cbi	0x11, 6	; 17
  ec:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  f0:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
  f4:	88 e6       	ldi	r24, 0x68	; 104
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
  fc:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
 100:	e1 e9       	ldi	r30, 0x91	; 145
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	88 61       	ori	r24, 0x18	; 24
 108:	80 83       	st	Z, r24
 10a:	80 81       	ld	r24, Z
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	80 83       	st	Z, r24
 110:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <MaP_Bitrate_refTimer>
 114:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 118:	c5 9a       	sbi	0x18, 5	; 24
 11a:	e1 e7       	ldi	r30, 0x71	; 113
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 62       	ori	r24, 0x20	; 32
 122:	80 83       	st	Z, r24
 124:	78 94       	sei
 126:	08 95       	ret

00000128 <init_MaP>:
 128:	85 b7       	in	r24, 0x35	; 53
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	85 bf       	out	0x35, r24	; 53
 12e:	85 b7       	in	r24, 0x35	; 53
 130:	80 68       	ori	r24, 0x80	; 128
 132:	85 bf       	out	0x35, r24	; 53
 134:	87 98       	cbi	0x10, 7	; 16
 136:	86 9a       	sbi	0x10, 6	; 16
 138:	8e 9a       	sbi	0x11, 6	; 17
 13a:	86 e1       	ldi	r24, 0x16	; 22
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	08 95       	ret

00000140 <__vector_31>:
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	cf 92       	push	r12
 14c:	df 92       	push	r13
 14e:	ef 92       	push	r14
 150:	ff 92       	push	r15
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
 16a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <mts_type>
 16e:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <mts_type>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	94 30       	cpi	r25, 0x04	; 4
 176:	09 f0       	breq	.+2      	; 0x17a <__vector_31+0x3a>
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	81 11       	cpse	r24, r1
 17c:	06 c0       	rjmp	.+12     	; 0x18a <__vector_31+0x4a>
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	21 30       	cpi	r18, 0x01	; 1
 182:	09 f0       	breq	.+2      	; 0x186 <__vector_31+0x46>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	88 23       	and	r24, r24
 188:	61 f0       	breq	.+24     	; 0x1a2 <__vector_31+0x62>
 18a:	c0 90 13 01 	lds	r12, 0x0113	; 0x800113 <mts_send>
 18e:	d0 90 14 01 	lds	r13, 0x0114	; 0x800114 <mts_send+0x1>
 192:	e1 2c       	mov	r14, r1
 194:	f1 2c       	mov	r15, r1
 196:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <bitindex>
 19a:	08 2e       	mov	r0, r24
 19c:	00 0c       	add	r0, r0
 19e:	99 0b       	sbc	r25, r25
 1a0:	0c c0       	rjmp	.+24     	; 0x1ba <__vector_31+0x7a>
 1a2:	c0 90 0f 01 	lds	r12, 0x010F	; 0x80010f <mts_send_32bit>
 1a6:	d0 90 10 01 	lds	r13, 0x0110	; 0x800110 <mts_send_32bit+0x1>
 1aa:	e0 90 11 01 	lds	r14, 0x0111	; 0x800111 <mts_send_32bit+0x2>
 1ae:	f0 90 12 01 	lds	r15, 0x0112	; 0x800112 <mts_send_32bit+0x3>
 1b2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <bitindex_16_Bit>
 1b6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <bitindex_16_Bit+0x1>
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	01 f5       	brne	.+64     	; 0x1fe <__vector_31+0xbe>
 1be:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 1c2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <mts_type>
 1c6:	84 30       	cpi	r24, 0x04	; 4
 1c8:	09 f0       	breq	.+2      	; 0x1cc <__vector_31+0x8c>
 1ca:	66 c0       	rjmp	.+204    	; 0x298 <__vector_31+0x158>
 1cc:	8e 9a       	sbi	0x11, 6	; 17
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	96 e0       	ldi	r25, 0x06	; 6
 1d2:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
 1d6:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
 1da:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 1de:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 1e2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <stm_receive>
 1e6:	88 e0       	ldi	r24, 0x08	; 8
 1e8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <bitindex>
 1ec:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <f_CNT>
 1f0:	c1 9a       	sbi	0x18, 1	; 24
 1f2:	e1 e7       	ldi	r30, 0x71	; 113
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	82 60       	ori	r24, 0x02	; 2
 1fa:	80 83       	st	Z, r24
 1fc:	4d c0       	rjmp	.+154    	; 0x298 <__vector_31+0x158>
 1fe:	9c 01       	movw	r18, r24
 200:	21 50       	subi	r18, 0x01	; 1
 202:	31 09       	sbc	r19, r1
 204:	41 e0       	ldi	r20, 0x01	; 1
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	02 2e       	mov	r0, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <__vector_31+0xd0>
 20c:	44 0f       	add	r20, r20
 20e:	55 1f       	adc	r21, r21
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <__vector_31+0xcc>
 214:	05 2e       	mov	r0, r21
 216:	00 0c       	add	r0, r0
 218:	66 0b       	sbc	r22, r22
 21a:	77 0b       	sbc	r23, r23
 21c:	4c 21       	and	r20, r12
 21e:	5d 21       	and	r21, r13
 220:	6e 21       	and	r22, r14
 222:	7f 21       	and	r23, r15
 224:	45 2b       	or	r20, r21
 226:	46 2b       	or	r20, r22
 228:	47 2b       	or	r20, r23
 22a:	11 f0       	breq	.+4      	; 0x230 <__vector_31+0xf0>
 22c:	8e 9a       	sbi	0x11, 6	; 17
 22e:	1d c0       	rjmp	.+58     	; 0x26a <__vector_31+0x12a>
 230:	8e 98       	cbi	0x11, 6	; 17
 232:	c2 9a       	sbi	0x18, 2	; 24
 234:	02 97       	sbiw	r24, 0x02	; 2
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	ba 01       	movw	r22, r20
 23c:	02 c0       	rjmp	.+4      	; 0x242 <__vector_31+0x102>
 23e:	66 0f       	add	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	8a 95       	dec	r24
 244:	e2 f7       	brpl	.-8      	; 0x23e <__vector_31+0xfe>
 246:	cb 01       	movw	r24, r22
 248:	09 2e       	mov	r0, r25
 24a:	00 0c       	add	r0, r0
 24c:	aa 0b       	sbc	r26, r26
 24e:	bb 0b       	sbc	r27, r27
 250:	c8 22       	and	r12, r24
 252:	d9 22       	and	r13, r25
 254:	ea 22       	and	r14, r26
 256:	fb 22       	and	r15, r27
 258:	cd 28       	or	r12, r13
 25a:	ce 28       	or	r12, r14
 25c:	cf 28       	or	r12, r15
 25e:	29 f0       	breq	.+10     	; 0x26a <__vector_31+0x12a>
 260:	e1 e7       	ldi	r30, 0x71	; 113
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	84 60       	ori	r24, 0x04	; 4
 268:	80 83       	st	Z, r24
 26a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <mts_type>
 26e:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <mts_type>
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	94 30       	cpi	r25, 0x04	; 4
 276:	09 f0       	breq	.+2      	; 0x27a <__vector_31+0x13a>
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	81 11       	cpse	r24, r1
 27c:	06 c0       	rjmp	.+12     	; 0x28a <__vector_31+0x14a>
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	41 30       	cpi	r20, 0x01	; 1
 282:	09 f0       	breq	.+2      	; 0x286 <__vector_31+0x146>
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	88 23       	and	r24, r24
 288:	19 f0       	breq	.+6      	; 0x290 <__vector_31+0x150>
 28a:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <bitindex>
 28e:	04 c0       	rjmp	.+8      	; 0x298 <__vector_31+0x158>
 290:	30 93 0e 01 	sts	0x010E, r19	; 0x80010e <bitindex_16_Bit+0x1>
 294:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <bitindex_16_Bit>
 298:	ff 91       	pop	r31
 29a:	ef 91       	pop	r30
 29c:	bf 91       	pop	r27
 29e:	af 91       	pop	r26
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	7f 91       	pop	r23
 2a6:	6f 91       	pop	r22
 2a8:	5f 91       	pop	r21
 2aa:	4f 91       	pop	r20
 2ac:	3f 91       	pop	r19
 2ae:	2f 91       	pop	r18
 2b0:	ff 90       	pop	r15
 2b2:	ef 90       	pop	r14
 2b4:	df 90       	pop	r13
 2b6:	cf 90       	pop	r12
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <__vector_32>:
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
 2d0:	ef 93       	push	r30
 2d2:	ff 93       	push	r31
 2d4:	e1 e7       	ldi	r30, 0x71	; 113
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	10 82       	st	Z, r1
 2da:	88 e6       	ldi	r24, 0x68	; 104
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
 2e2:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
 2e6:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 2ea:	c3 9a       	sbi	0x18, 3	; 24
 2ec:	80 81       	ld	r24, Z
 2ee:	88 60       	ori	r24, 0x08	; 8
 2f0:	80 83       	st	Z, r24
 2f2:	ff 91       	pop	r31
 2f4:	ef 91       	pop	r30
 2f6:	9f 91       	pop	r25
 2f8:	8f 91       	pop	r24
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <__vector_33>:
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <__vector_34>:
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	2f 93       	push	r18
 324:	3f 93       	push	r19
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	ef 93       	push	r30
 32c:	ff 93       	push	r31
 32e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <bitindex>
 332:	81 50       	subi	r24, 0x01	; 1
 334:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <stm_receive>
 338:	8f 3f       	cpi	r24, 0xFF	; 255
 33a:	49 f5       	brne	.+82     	; 0x38e <__vector_34+0x76>
 33c:	99 23       	and	r25, r25
 33e:	21 f0       	breq	.+8      	; 0x348 <__vector_34+0x30>
 340:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <f_CNT>
 344:	20 32       	cpi	r18, 0x20	; 32
 346:	1c f0       	brlt	.+6      	; 0x34e <__vector_34+0x36>
 348:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 34c:	2b c0       	rjmp	.+86     	; 0x3a4 <__vector_34+0x8c>
 34e:	8e 98       	cbi	0x11, 6	; 17
 350:	20 ea       	ldi	r18, 0xA0	; 160
 352:	31 e0       	ldi	r19, 0x01	; 1
 354:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
 358:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
 35c:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 360:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 364:	c1 9a       	sbi	0x18, 1	; 24
 366:	e1 e7       	ldi	r30, 0x71	; 113
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	82 60       	ori	r24, 0x02	; 2
 36e:	80 83       	st	Z, r24
 370:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <f_CNT>
 374:	e8 2f       	mov	r30, r24
 376:	08 2e       	mov	r0, r24
 378:	00 0c       	add	r0, r0
 37a:	ff 0b       	sbc	r31, r31
 37c:	ea 5e       	subi	r30, 0xEA	; 234
 37e:	fe 4f       	sbci	r31, 0xFE	; 254
 380:	90 83       	st	Z, r25
 382:	8f 5f       	subi	r24, 0xFF	; 255
 384:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <f_CNT>
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	88 e0       	ldi	r24, 0x08	; 8
 38c:	0b c0       	rjmp	.+22     	; 0x3a4 <__vector_34+0x8c>
 38e:	7f 9b       	sbis	0x0f, 7	; 15
 390:	09 c0       	rjmp	.+18     	; 0x3a4 <__vector_34+0x8c>
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	08 2e       	mov	r0, r24
 398:	02 c0       	rjmp	.+4      	; 0x39e <__vector_34+0x86>
 39a:	22 0f       	add	r18, r18
 39c:	33 1f       	adc	r19, r19
 39e:	0a 94       	dec	r0
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <__vector_34+0x82>
 3a2:	92 2b       	or	r25, r18
 3a4:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <stm_receive>
 3a8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <bitindex>
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	9f 91       	pop	r25
 3b2:	8f 91       	pop	r24
 3b4:	3f 91       	pop	r19
 3b6:	2f 91       	pop	r18
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <MC_conversion_8bit>:
 3c2:	98 e0       	ldi	r25, 0x08	; 8
 3c4:	88 23       	and	r24, r24
 3c6:	b4 f4       	brge	.+44     	; 0x3f4 <MC_conversion_8bit+0x32>
 3c8:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <mts_send>
 3cc:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <mts_send+0x1>
 3d0:	22 0f       	add	r18, r18
 3d2:	33 1f       	adc	r19, r19
 3d4:	22 0f       	add	r18, r18
 3d6:	33 1f       	adc	r19, r19
 3d8:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <mts_send+0x1>
 3dc:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <mts_send>
 3e0:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <mts_send>
 3e4:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <mts_send+0x1>
 3e8:	22 60       	ori	r18, 0x02	; 2
 3ea:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <mts_send+0x1>
 3ee:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <mts_send>
 3f2:	15 c0       	rjmp	.+42     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3f4:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <mts_send>
 3f8:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <mts_send+0x1>
 3fc:	22 0f       	add	r18, r18
 3fe:	33 1f       	adc	r19, r19
 400:	22 0f       	add	r18, r18
 402:	33 1f       	adc	r19, r19
 404:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <mts_send+0x1>
 408:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <mts_send>
 40c:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <mts_send>
 410:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <mts_send+0x1>
 414:	21 60       	ori	r18, 0x01	; 1
 416:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <mts_send+0x1>
 41a:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <mts_send>
 41e:	88 0f       	add	r24, r24
 420:	91 50       	subi	r25, 0x01	; 1
 422:	81 f6       	brne	.-96     	; 0x3c4 <MC_conversion_8bit+0x2>
 424:	08 95       	ret

00000426 <sendGCD>:
	/*
	mts_send = cdrq;
	mts_send = mts_send | (1<<TYPE1) | (1<<TYPE0);		// 11 für GCDF
	*/
	cdrq = cdrq | (1<<TYPE1) | (1<<TYPE0);		// 11 für GCDF
	MC_conversion_8bit(cdrq);
 426:	80 6c       	ori	r24, 0xC0	; 192
 428:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MC_conversion_8bit>
	
	mts_type = GCDF;		// master_to_slave_type = GCDF
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <mts_type>
	//bitindex = 0x08;
	bitindex = 0x10;
 432:	80 e1       	ldi	r24, 0x10	; 16
 434:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <bitindex>
	
	send_mts();
 438:	0e 94 75 00 	call	0xea	; 0xea <send_mts>
 43c:	08 95       	ret

0000043e <MC_conversion_16bit>:
	}
	
}

uint32_t MC_conversion_16bit(uint16_t cdrq)
{
 43e:	ac 01       	movw	r20, r24
 440:	20 e1       	ldi	r18, 0x10	; 16
	uint8_t i = 0;
	uint16_t MASKE = 0b1000000000000000;	//Comparemask - MSB First
	uint32_t cdrq1 = 0;
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	70 e0       	ldi	r23, 0x00	; 0
 446:	cb 01       	movw	r24, r22
	//////////////////////////////////////
	// 16 Bit to 32 Bit with Manchester Code

	for(i = 0; i < 16; i++)
	{
		if(cdrq & MASKE)
 448:	55 23       	and	r21, r21
 44a:	74 f4       	brge	.+28     	; 0x468 <MC_conversion_16bit+0x2a>
		{
			cdrq1 = cdrq1 << 2;
 44c:	dc 01       	movw	r26, r24
 44e:	cb 01       	movw	r24, r22
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	aa 1f       	adc	r26, r26
 456:	bb 1f       	adc	r27, r27
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	aa 1f       	adc	r26, r26
 45e:	bb 1f       	adc	r27, r27
			cdrq1 = cdrq1 | 2;
 460:	bc 01       	movw	r22, r24
 462:	cd 01       	movw	r24, r26
 464:	62 60       	ori	r22, 0x02	; 2
 466:	0d c0       	rjmp	.+26     	; 0x482 <MC_conversion_16bit+0x44>
		}
		else
		{
			cdrq1 = cdrq1 << 2;
 468:	dc 01       	movw	r26, r24
 46a:	cb 01       	movw	r24, r22
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	aa 1f       	adc	r26, r26
 472:	bb 1f       	adc	r27, r27
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	aa 1f       	adc	r26, r26
 47a:	bb 1f       	adc	r27, r27
			cdrq1 = cdrq1 | 1;
 47c:	bc 01       	movw	r22, r24
 47e:	cd 01       	movw	r24, r26
 480:	61 60       	ori	r22, 0x01	; 1
		}
		
		cdrq = cdrq << 1;
 482:	44 0f       	add	r20, r20
 484:	55 1f       	adc	r21, r21
 486:	21 50       	subi	r18, 0x01	; 1
	uint32_t cdrq1 = 0;
	
	//////////////////////////////////////
	// 16 Bit to 32 Bit with Manchester Code

	for(i = 0; i < 16; i++)
 488:	f9 f6       	brne	.-66     	; 0x448 <MC_conversion_16bit+0xa>
		}
		
		cdrq = cdrq << 1;
	}
	return cdrq1;
}
 48a:	08 95       	ret

0000048c <sendACD>:
}

void sendACD(uint8_t cdrq, uint8_t adresse)
{
	uint32_t cdrq2 = 0;
	cdrq = cdrq & ~(1<<TYPE1);
 48c:	8f 77       	andi	r24, 0x7F	; 127
	cdrq = cdrq | (1<<TYPE0);
	//uint16_t cdrq1 = cdrq;
	//uint16_t cdrq1 = cdrq & ~((1<<TYPE1) | (1<<TYPE0));	// 01 für ACDF
	//cdrq1 = (cdrq1<<8);				// 8 Stellen nach links, damit 8 Stellen für die Addresse frei sind
	uint16_t cdrq1 = (cdrq<<8);
 48e:	28 2f       	mov	r18, r24
 490:	20 64       	ori	r18, 0x40	; 64
 492:	86 2f       	mov	r24, r22
 494:	90 e0       	ldi	r25, 0x00	; 0
	cdrq1 = cdrq1 | adresse;		// Adresse an die letzten 8 Bit
	
	cdrq2 = MC_conversion_16bit(cdrq1);
 496:	92 2b       	or	r25, r18
 498:	0e 94 1f 02 	call	0x43e	; 0x43e <MC_conversion_16bit>
	
	mts_type = ACDF;		// master_to_slave_type = ACDF
 49c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <mts_type>
	//bitindex_16_Bit = 0x20;
	bitindex_16_Bit = 0b1000000000000000;
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	30 e8       	ldi	r19, 0x80	; 128
 4a4:	30 93 0e 01 	sts	0x010E, r19	; 0x80010e <bitindex_16_Bit+0x1>
 4a8:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <bitindex_16_Bit>
	mts_send_32bit = cdrq2;
 4ac:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <mts_send_32bit>
 4b0:	70 93 10 01 	sts	0x0110, r23	; 0x800110 <mts_send_32bit+0x1>
 4b4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mts_send_32bit+0x2>
 4b8:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <mts_send_32bit+0x3>
		
	send_mts();
 4bc:	0e 94 75 00 	call	0xea	; 0xea <send_mts>
 4c0:	08 95       	ret

000004c2 <main>:
uint8_t i;
static uint8_t *test; 

int main(void)
{	
 CLKPR = 0x80;
 4c2:	e1 e6       	ldi	r30, 0x61	; 97
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 e8       	ldi	r24, 0x80	; 128
 4c8:	80 83       	st	Z, r24
 CLKPR = 0x00;						//Set clock to 16MHz
 4ca:	10 82       	st	Z, r1
	
	// Initialisierung für LEDs
	DDRB = 0xff;
 4cc:	cf ef       	ldi	r28, 0xFF	; 255
 4ce:	c4 b9       	out	0x04, r28	; 4
	PORTB = 0x00;
 4d0:	15 b8       	out	0x05, r1	; 5
	DDRD = DDRD | (1<<DDD2);
 4d2:	52 9a       	sbi	0x0a, 2	; 10
	
	
    // Initialisierung für das Empfangen am PD0 durch INT0
	DDRD = DDRD &~ (1<<DDD0);
 4d4:	50 98       	cbi	0x0a, 0	; 10
	PORTD = PORTD | (1<<PORTD0);
 4d6:	58 9a       	sbi	0x0b, 0	; 11
	
	TCNT3 = 0x00;	//Timer reset to 0x00
 4d8:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 4dc:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
	ICR3 = MaP_BITRATE;	// MaP_BITRATE 208
 4e0:	88 e6       	ldi	r24, 0x68	; 104
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
 4e8:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
	//Starts CTC-Mode
	TCCR3B = TCCR3B | (1<<WGM33) | (1<<WGM32) ;	// CTC-Mode and ICR3 as MAX-Value
 4ec:	e1 e9       	ldi	r30, 0x91	; 145
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	88 61       	ori	r24, 0x18	; 24
 4f4:	80 83       	st	Z, r24
	TCCR3B = TCCR3B | (1<<CS31);
 4f6:	80 81       	ld	r24, Z
 4f8:	82 60       	ori	r24, 0x02	; 2
 4fa:	80 83       	st	Z, r24
	//TCCR3B = TCCR3B & ~(1<<CS30) & ~(1<<CS32);	//Clock Prescaler clk/8

	//TIMSK3 = TIMSK3 | (1<<TOIE3); //Timer_3 Overflow Interrupt freigeben
		
	 EICRA = EICRA & ~(1<<ISC01) | (1<<ISC00); 	// any Flanke am INT0
 4fc:	e9 e6       	ldi	r30, 0x69	; 105
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 81       	ld	r24, Z
 502:	8c 7f       	andi	r24, 0xFC	; 252
 504:	81 60       	ori	r24, 0x01	; 1
 506:	80 83       	st	Z, r24
	 EIMSK = EIMSK | (1<<INT0);					// indivi. Interruptfreig. Für INT0
 508:	e8 9a       	sbi	0x1d, 0	; 29
	 sei();										// globale Interruptfreig.
 50a:	78 94       	sei
	 
	
	test = init_MaP();
 50c:	0e 94 94 00 	call	0x128	; 0x128 <init_MaP>
	uint8_t adress;
	//cdrq = 0b01011001;
	//adress = 0b11001011;
	cdrq = 0b11111111;
	adress = 0b11111111;
	MCUCR = MCUCR | (1<<JTD);
 510:	85 b7       	in	r24, 0x35	; 53
 512:	80 68       	ori	r24, 0x80	; 128
 514:	85 bf       	out	0x35, r24	; 53
	MCUCR = MCUCR | (1<<JTD);	//JTAG Schnittstelle deaktivieren
 516:	85 b7       	in	r24, 0x35	; 53
 518:	80 68       	ori	r24, 0x80	; 128
 51a:	85 bf       	out	0x35, r24	; 53

	
	DDRF = DDRF | (1<<DDF6);	//PF6 als Output
 51c:	86 9a       	sbi	0x10, 6	; 16
	DDRF = 0xff;
 51e:	c0 bb       	out	0x10, r28	; 16
	
	//sendRQT(cdrq);
	
	sb = TRUE;
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    while (1) 
    {		
		
		if(bit_main == 0b1001101010011001)
		{
			PORTD = PORTD ^ (1<<PORTD2);
 526:	c4 e0       	ldi	r28, 0x04	; 4
		}
		
		if(bf == TRUE)
		{
			bf = FALSE;
			sb = TRUE;
 528:	d1 e0       	ldi	r29, 0x01	; 1
	sb = TRUE;
	//ICR3 = 800;	// Zum Empfangen gehört der Top Value geändert
    while (1) 
    {		
		
		if(bit_main == 0b1001101010011001)
 52a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bit_main>
 52e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <bit_main+0x1>
 532:	89 39       	cpi	r24, 0x99	; 153
 534:	9a 49       	sbci	r25, 0x9A	; 154
 536:	39 f4       	brne	.+14     	; 0x546 <main+0x84>
		{
			PORTD = PORTD ^ (1<<PORTD2);
 538:	8b b1       	in	r24, 0x0b	; 11
 53a:	8c 27       	eor	r24, r28
 53c:	8b b9       	out	0x0b, r24	; 11
			bit_main = 0x00;
 53e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <bit_main+0x1>
 542:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <bit_main>
		}
		if(bit_main == 0b10101010101)
 546:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bit_main>
 54a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <bit_main+0x1>
 54e:	85 35       	cpi	r24, 0x55	; 85
 550:	95 40       	sbci	r25, 0x05	; 5
 552:	39 f4       	brne	.+14     	; 0x562 <main+0xa0>
		{
			PORTD = PORTD ^ (1<<PORTD2);
 554:	8b b1       	in	r24, 0x0b	; 11
 556:	8c 27       	eor	r24, r28
 558:	8b b9       	out	0x0b, r24	; 11
			bit_main = 0x00;
 55a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <bit_main+0x1>
 55e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <bit_main>
		}
		if(bit_main == 0b10111010)
 562:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bit_main>
 566:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <bit_main+0x1>
 56a:	8a 3b       	cpi	r24, 0xBA	; 186
 56c:	91 05       	cpc	r25, r1
 56e:	39 f4       	brne	.+14     	; 0x57e <main+0xbc>
		{
			PORTD = PORTD ^ (1<<PORTD2);
 570:	8b b1       	in	r24, 0x0b	; 11
 572:	8c 27       	eor	r24, r28
 574:	8b b9       	out	0x0b, r24	; 11
			bit_main = 0x00;
 576:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <bit_main+0x1>
 57a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <bit_main>
		}
		
		if(bf == TRUE)
 57e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <bf>
 582:	81 30       	cpi	r24, 0x01	; 1
 584:	41 f4       	brne	.+16     	; 0x596 <main+0xd4>
		{
			bf = FALSE;
 586:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <bf>
			sb = TRUE;
 58a:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <__data_start>
			//ICR3 = 800;	// Zum Empfangen gehört der Top Value geändert
			//PORTB = bit_main;
			bit_main = 0x00;
 58e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <bit_main+0x1>
 592:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <bit_main>
		sendRQT(cdrq);
		_delay_ms(500);
		cdrq = 0b10111011;
		sendGCD(cdrq);*/
		
		sendACD(cdrq,adress);
 596:	6f ef       	ldi	r22, 0xFF	; 255
 598:	8f ef       	ldi	r24, 0xFF	; 255
 59a:	0e 94 46 02 	call	0x48c	; 0x48c <sendACD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 59e:	8f ef       	ldi	r24, 0xFF	; 255
 5a0:	99 e6       	ldi	r25, 0x69	; 105
 5a2:	28 e1       	ldi	r18, 0x18	; 24
 5a4:	81 50       	subi	r24, 0x01	; 1
 5a6:	90 40       	sbci	r25, 0x00	; 0
 5a8:	20 40       	sbci	r18, 0x00	; 0
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <main+0xe2>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <main+0xec>
 5ae:	00 00       	nop
		_delay_ms(500);
		sendGCD(01010101);
 5b0:	81 e4       	ldi	r24, 0x41	; 65
 5b2:	0e 94 13 02 	call	0x426	; 0x426 <sendGCD>
 5b6:	8f ef       	ldi	r24, 0xFF	; 255
 5b8:	99 e6       	ldi	r25, 0x69	; 105
 5ba:	28 e1       	ldi	r18, 0x18	; 24
 5bc:	81 50       	subi	r24, 0x01	; 1
 5be:	90 40       	sbci	r25, 0x00	; 0
 5c0:	20 40       	sbci	r18, 0x00	; 0
 5c2:	e1 f7       	brne	.-8      	; 0x5bc <main+0xfa>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <main+0x104>
 5c6:	00 00       	nop
 5c8:	b0 cf       	rjmp	.-160    	; 0x52a <main+0x68>

000005ca <__vector_1>:
			
    }
}

ISR(INT0_vect)
{
 5ca:	1f 92       	push	r1
 5cc:	0f 92       	push	r0
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	0f 92       	push	r0
 5d2:	11 24       	eor	r1, r1
 5d4:	8f 93       	push	r24
 5d6:	9f 93       	push	r25
	if(sb == TRUE && send == FALSE)
 5d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5dc:	81 30       	cpi	r24, 0x01	; 1
 5de:	89 f4       	brne	.+34     	; 0x602 <__vector_1+0x38>
 5e0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <send>
 5e4:	81 11       	cpse	r24, r1
 5e6:	0d c0       	rjmp	.+26     	; 0x602 <__vector_1+0x38>
	{
		if(PIND & (1<<PIND0))
 5e8:	48 99       	sbic	0x09, 0	; 9
 5ea:	6e c0       	rjmp	.+220    	; 0x6c8 <__vector_1+0xfe>
		{
			//ignorieren, Ruhephase am Ende eines Empfangenen Byte
		}
		else
		{
			PORTD = PORTD ^ (1<<PORTD2);
 5ec:	9b b1       	in	r25, 0x0b	; 11
 5ee:	84 e0       	ldi	r24, 0x04	; 4
 5f0:	89 27       	eor	r24, r25
 5f2:	8b b9       	out	0x0b, r24	; 11
			sb = FALSE;
 5f4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			TCNT3 = 0;
 5f8:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 5fc:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 600:	63 c0       	rjmp	.+198    	; 0x6c8 <__vector_1+0xfe>
		}
	}
	else if(sb == FALSE && send == FALSE)
 602:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 606:	81 11       	cpse	r24, r1
 608:	5f c0       	rjmp	.+190    	; 0x6c8 <__vector_1+0xfe>
 60a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <send>
 60e:	81 11       	cpse	r24, r1
 610:	5b c0       	rjmp	.+182    	; 0x6c8 <__vector_1+0xfe>
	{
		//if(TCNT3 < ((MaP_BITRATE*2)-70))			//etwas weniger als 112, damit er die Flanke wirklich erkennt.
		//if(TCNT3 < 150)
		//if(TCNT3 < 350)		// Richtiger Wert für eine Chiprate von 208
		if(TCNT3 < ((MaP_BITRATE*2)-70))	// Abfragung damit nur die richtige Flanke erkannt wird. Jede nicht richtige wird ausgelassen
 612:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 616:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 61a:	8a 38       	cpi	r24, 0x8A	; 138
 61c:	91 05       	cpc	r25, r1
 61e:	08 f4       	brcc	.+2      	; 0x622 <__vector_1+0x58>
 620:	53 c0       	rjmp	.+166    	; 0x6c8 <__vector_1+0xfe>
		{
			// Die Flanke darf nicht genommen werden
		}
		else
		{
			TCNT3 = 0;
 622:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 626:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
			
			if(PIND & (1<<PIND0))		//PD0 abfragen, positive Flanke
 62a:	48 9b       	sbis	0x09, 0	; 9
 62c:	13 c0       	rjmp	.+38     	; 0x654 <__vector_1+0x8a>
			{
				bit_received = bit_received << 1;			//schieben um eins nach links
 62e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bit_received>
 632:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <bit_received+0x1>
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <bit_received+0x1>
 63e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bit_received>
				bit_received = bit_received | 0;
 642:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bit_received>
 646:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <bit_received+0x1>
 64a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <bit_received+0x1>
 64e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bit_received>
 652:	13 c0       	rjmp	.+38     	; 0x67a <__vector_1+0xb0>
			}
			else						//PD0 abfragen, negative Flanke
			{
				bit_received = bit_received << 1;
 654:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bit_received>
 658:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <bit_received+0x1>
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <bit_received+0x1>
 664:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bit_received>
				bit_received = bit_received | 1;			//schreibe eins hinein
 668:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bit_received>
 66c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <bit_received+0x1>
 670:	81 60       	ori	r24, 0x01	; 1
 672:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <bit_received+0x1>
 676:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bit_received>
			}
			
			counter++;
 67a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 67e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 682:	01 96       	adiw	r24, 0x01	; 1
 684:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 688:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			
			
			if(counter >= 8)
 68c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 690:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 694:	08 97       	sbiw	r24, 0x08	; 8
 696:	c0 f0       	brcs	.+48     	; 0x6c8 <__vector_1+0xfe>
			{
				counter = 0;
 698:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 69c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
				bf = TRUE;
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <bf>
				bit_main = bit_received;
 6a6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bit_received>
 6aa:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <bit_received+0x1>
 6ae:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <bit_main+0x1>
 6b2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bit_main>
				bit_received = 0x00;
 6b6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <bit_received+0x1>
 6ba:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <bit_received>
				PORTB = bit_main;
 6be:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bit_main>
 6c2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <bit_main+0x1>
 6c6:	85 b9       	out	0x05, r24	; 5
			}
		}
	}
	
}
 6c8:	9f 91       	pop	r25
 6ca:	8f 91       	pop	r24
 6cc:	0f 90       	pop	r0
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	0f 90       	pop	r0
 6d2:	1f 90       	pop	r1
 6d4:	18 95       	reti

000006d6 <_exit>:
 6d6:	f8 94       	cli

000006d8 <__stop_program>:
 6d8:	ff cf       	rjmp	.-2      	; 0x6d8 <__stop_program>
