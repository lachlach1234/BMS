
MaP_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000332  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000332  000003c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800062  00800062  000003c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae8  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b5  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082b  00000000  00000000  00001699  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00001ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e2  00000000  00000000  00002088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000480  00000000  00000000  0000256a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000029ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	21 c1       	rjmp	.+578    	; 0x248 <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	4c c0       	rjmp	.+152    	; 0xae <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e2 e3       	ldi	r30, 0x32	; 50
  32:	f3 e0       	ldi	r31, 0x03	; 3
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ae 36       	cpi	r26, 0x6E	; 110
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	9c d0       	rcall	.+312    	; 0x18a <main>
  52:	6d c1       	rjmp	.+730    	; 0x32e <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <init_PCINT1>:
	uint8_t dataL = (temp & 0xff);
	
	// Senden der Highbyte Daten
	send_test_data(dataH);
	send_test_data(dataL);
}
  56:	8b b7       	in	r24, 0x3b	; 59
  58:	80 62       	ori	r24, 0x20	; 32
  5a:	8b bf       	out	0x3b, r24	; 59
  5c:	a9 9a       	sbi	0x15, 1	; 21
  5e:	78 94       	sei
  60:	08 95       	ret

00000062 <enable_Timer1>:
  62:	80 b7       	in	r24, 0x30	; 48
  64:	84 60       	ori	r24, 0x04	; 4
  66:	80 bf       	out	0x30, r24	; 48
  68:	1f bc       	out	0x2f, r1	; 47
  6a:	88 ec       	ldi	r24, 0xC8	; 200
  6c:	8e bd       	out	0x2e, r24	; 46
  6e:	88 b7       	in	r24, 0x38	; 56
  70:	80 64       	ori	r24, 0x40	; 64
  72:	88 bf       	out	0x38, r24	; 56
  74:	08 95       	ret

00000076 <disable_Timer1>:
  76:	80 b7       	in	r24, 0x30	; 48
  78:	8b 7f       	andi	r24, 0xFB	; 251
  7a:	80 bf       	out	0x30, r24	; 48
  7c:	10 be       	out	0x30, r1	; 48
  7e:	08 95       	ret

00000080 <init_MaP>:
  80:	b8 9a       	sbi	0x17, 0	; 23
  82:	c0 9a       	sbi	0x18, 0	; 24
  84:	08 95       	ret

00000086 <init_statusLED>:
  86:	bb 9a       	sbi	0x17, 3	; 23
  88:	08 95       	ret

0000008a <mts_test_trf>:
  8a:	12 be       	out	0x32, r1	; 50
  8c:	89 b7       	in	r24, 0x39	; 57
  8e:	80 61       	ori	r24, 0x10	; 16
  90:	89 bf       	out	0x39, r24	; 57
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	8a bd       	out	0x2a, r24	; 42
  96:	83 b7       	in	r24, 0x33	; 51
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	83 bf       	out	0x33, r24	; 51
  9c:	12 be       	out	0x32, r1	; 50
  9e:	84 e3       	ldi	r24, 0x34	; 52
  a0:	89 bd       	out	0x29, r24	; 41
  a2:	88 b7       	in	r24, 0x38	; 56
  a4:	80 61       	ori	r24, 0x10	; 16
  a6:	88 bf       	out	0x38, r24	; 56
  a8:	12 be       	out	0x32, r1	; 50
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <__vector_10>:
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	4f 93       	push	r20
  be:	5f 93       	push	r21
  c0:	8f 93       	push	r24
  c2:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <mts_send>
  c6:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <mts_send+0x1>
  ca:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <bitindex>
  ce:	81 11       	cpse	r24, r1
  d0:	0e c0       	rjmp	.+28     	; 0xee <__vector_10+0x40>
  d2:	89 b7       	in	r24, 0x39	; 57
  d4:	8f 7e       	andi	r24, 0xEF	; 239
  d6:	89 bf       	out	0x39, r24	; 57
  d8:	83 b7       	in	r24, 0x33	; 51
  da:	8d 7f       	andi	r24, 0xFD	; 253
  dc:	83 bf       	out	0x33, r24	; 51
  de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  e2:	84 30       	cpi	r24, 0x04	; 4
  e4:	11 f4       	brne	.+4      	; 0xea <__vector_10+0x3c>
  e6:	c0 9a       	sbi	0x18, 0	; 24
  e8:	14 c0       	rjmp	.+40     	; 0x112 <__vector_10+0x64>
  ea:	c0 98       	cbi	0x18, 0	; 24
  ec:	12 c0       	rjmp	.+36     	; 0x112 <__vector_10+0x64>
  ee:	81 50       	subi	r24, 0x01	; 1
  f0:	41 e0       	ldi	r20, 0x01	; 1
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	08 2e       	mov	r0, r24
  f6:	02 c0       	rjmp	.+4      	; 0xfc <__vector_10+0x4e>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <__vector_10+0x4a>
 100:	24 23       	and	r18, r20
 102:	35 23       	and	r19, r21
 104:	23 2b       	or	r18, r19
 106:	11 f0       	breq	.+4      	; 0x10c <__vector_10+0x5e>
 108:	c0 9a       	sbi	0x18, 0	; 24
 10a:	01 c0       	rjmp	.+2      	; 0x10e <__vector_10+0x60>
 10c:	c0 98       	cbi	0x18, 0	; 24
 10e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <bitindex>
 112:	8f 91       	pop	r24
 114:	5f 91       	pop	r21
 116:	4f 91       	pop	r20
 118:	3f 91       	pop	r19
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <MC_conversion_8bit>:

void MC_conversion_8bit(uint8_t cmd_received)
{
 126:	98 e0       	ldi	r25, 0x08	; 8
	//////////////////////////////////////
	// 8 Bit to 16 Bit with Manchester Code

	for(i = 0; i < 8; i++)
	{
		if(cmd_received & MASKE)
 128:	88 23       	and	r24, r24
 12a:	b4 f4       	brge	.+44     	; 0x158 <MC_conversion_8bit+0x32>
		{
			mts_send = mts_send << 2;
 12c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <mts_send>
 130:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <mts_send+0x1>
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <mts_send+0x1>
 140:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <mts_send>
			mts_send = mts_send | 2;
 144:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <mts_send>
 148:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <mts_send+0x1>
 14c:	22 60       	ori	r18, 0x02	; 2
 14e:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <mts_send+0x1>
 152:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <mts_send>
 156:	15 c0       	rjmp	.+42     	; 0x182 <MC_conversion_8bit+0x5c>
		}
		else
		{
			mts_send = mts_send << 2;
 158:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <mts_send>
 15c:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <mts_send+0x1>
 160:	22 0f       	add	r18, r18
 162:	33 1f       	adc	r19, r19
 164:	22 0f       	add	r18, r18
 166:	33 1f       	adc	r19, r19
 168:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <mts_send+0x1>
 16c:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <mts_send>
			mts_send = mts_send | 1;
 170:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <mts_send>
 174:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <mts_send+0x1>
 178:	21 60       	ori	r18, 0x01	; 1
 17a:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <mts_send+0x1>
 17e:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <mts_send>
		}
		
		cmd_received = cmd_received << 1;
 182:	88 0f       	add	r24, r24
 184:	91 50       	subi	r25, 0x01	; 1
	uint8_t MASKE = 0b10000000;	//Comparemask - MSB First
	
	//////////////////////////////////////
	// 8 Bit to 16 Bit with Manchester Code

	for(i = 0; i < 8; i++)
 186:	81 f6       	brne	.-96     	; 0x128 <MC_conversion_8bit+0x2>
			mts_send = mts_send | 1;
		}
		
		cmd_received = cmd_received << 1;
	}	
}
 188:	08 95       	ret

0000018a <main>:



int main(void)
{
	CLKPR = 0x80;
 18a:	80 e8       	ldi	r24, 0x80	; 128
 18c:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0x00;
 18e:	16 bc       	out	0x26, r1	; 38
	
	init_MaP();
 190:	77 df       	rcall	.-274    	; 0x80 <init_MaP>
	init_statusLED();
 192:	79 df       	rcall	.-270    	; 0x86 <init_statusLED>
	//enable_clock();
	//TCCR0B = TCCR0B | (1<<CS01);	// clock Prescaler = 8
	//init_PCINT1();
	
	M_DDR_Input;
 194:	b9 98       	cbi	0x17, 1	; 23
	M_OUT_L;
 196:	c1 98       	cbi	0x18, 1	; 24
	
	//M_OUT_H;
	//enable_clock();
	
		
	init_PCINT1();
 198:	5e df       	rcall	.-324    	; 0x56 <init_PCINT1>
	enable_Timer1();
 19a:	63 df       	rcall	.-314    	; 0x62 <enable_Timer1>
	//uint16_t test2 = 0b1001100110101011;
	/*GIMSK = GIMSK & ~(1<<PCIE);
	M_DDR_Output;
	M_OUT_H;*/
	
	mts_send = 0b10110110;
 19c:	86 eb       	ldi	r24, 0xB6	; 182
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <mts_send+0x1>
 1a4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <mts_send>
	bitindex = 0x10;
 1a8:	80 e1       	ldi	r24, 0x10	; 16
 1aa:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <bitindex>
	mts_type = RQTF;
 1ae:	84 e0       	ldi	r24, 0x04	; 4
 1b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	
	
	//M_DDR_Output;
	sei ();
 1b4:	78 94       	sei
	
	S_DDR_Output;
 1b6:	b8 9a       	sbi	0x17, 0	; 23
	S_OUT_L;
 1b8:	c0 98       	cbi	0x18, 0	; 24
				mts_test_trf(mts_send);
				bit_main = 0x00;
			}
			else if(bit_main == 0b10111011)
			{
				PORTB = PORTB ^ (1<<PB3);
 1ba:	18 e0       	ldi	r17, 0x08	; 8
				MC_conversion_8bit(0b10111011);
				bitindex = 0x10;
 1bc:	d0 e1       	ldi	r29, 0x10	; 16
				mts_test_trf(mts_send);
				bit_main = 0x00;
			}
			bf = FALSE;
			sb = TRUE;
 1be:	c1 e0       	ldi	r28, 0x01	; 1
			PORTB = PORTB ^ (1<<PB3);
			bit_main = 0x00;
		}
		*/
		
		if(bf == TRUE)
 1c0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <bf>
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x36>
		{	
			//PORTB = PORTB ^ (1<<PB3);
			disable_Timer1();
 1c8:	56 df       	rcall	.-340    	; 0x76 <disable_Timer1>
			//enable_clock();
			GIMSK = GIMSK & ~(1<<PCIE);		// Deaktivieren des Pin Change Interrupts
 1ca:	8b b7       	in	r24, 0x3b	; 59
 1cc:	8f 7d       	andi	r24, 0xDF	; 223
 1ce:	8b bf       	out	0x3b, r24	; 59
			
			if(bit_main == 0b10100101)
 1d0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <bit_main>
 1d4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <bit_main+0x1>
 1d8:	85 3a       	cpi	r24, 0xA5	; 165
 1da:	91 05       	cpc	r25, r1
 1dc:	89 f4       	brne	.+34     	; 0x200 <main+0x76>
			{
				PORTB = PORTB ^ (1<<PB3);
 1de:	88 b3       	in	r24, 0x18	; 24
 1e0:	81 27       	eor	r24, r17
 1e2:	88 bb       	out	0x18, r24	; 24
				MC_conversion_8bit(0b10100101);
 1e4:	85 ea       	ldi	r24, 0xA5	; 165
 1e6:	9f df       	rcall	.-194    	; 0x126 <MC_conversion_8bit>
				bitindex = 0x10;
 1e8:	d0 93 63 00 	sts	0x0063, r29	; 0x800063 <bitindex>
				mts_test_trf(mts_send);
 1ec:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mts_send>
 1f0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <mts_send+0x1>
 1f4:	4a df       	rcall	.-364    	; 0x8a <mts_test_trf>
				bit_main = 0x00;
 1f6:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <bit_main+0x1>
 1fa:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <bit_main>
 1fe:	17 c0       	rjmp	.+46     	; 0x22e <main+0xa4>
			}
			else if(bit_main == 0b10111011)
 200:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <bit_main>
 204:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <bit_main+0x1>
 208:	8b 3b       	cpi	r24, 0xBB	; 187
 20a:	91 05       	cpc	r25, r1
 20c:	81 f4       	brne	.+32     	; 0x22e <main+0xa4>
			{
				PORTB = PORTB ^ (1<<PB3);
 20e:	88 b3       	in	r24, 0x18	; 24
 210:	81 27       	eor	r24, r17
 212:	88 bb       	out	0x18, r24	; 24
				MC_conversion_8bit(0b10111011);
 214:	8b eb       	ldi	r24, 0xBB	; 187
 216:	87 df       	rcall	.-242    	; 0x126 <MC_conversion_8bit>
				bitindex = 0x10;
 218:	d0 93 63 00 	sts	0x0063, r29	; 0x800063 <bitindex>
				mts_test_trf(mts_send);
 21c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <mts_send>
 220:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <mts_send+0x1>
 224:	32 df       	rcall	.-412    	; 0x8a <mts_test_trf>
				bit_main = 0x00;
 226:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <bit_main+0x1>
 22a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <bit_main>
			}
			bf = FALSE;
 22e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <bf>
			sb = TRUE;
 232:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__data_start>
			//PORTB = bit_main;
			bit_main = 0x00;
 236:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <bit_main+0x1>
 23a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <bit_main>
			//disable_clock();
			enable_Timer1();
 23e:	11 df       	rcall	.-478    	; 0x62 <enable_Timer1>
			GIMSK = GIMSK | (1<<PCIE);	// Aktivieren des PIN Change Interrupts
 240:	8b b7       	in	r24, 0x3b	; 59
 242:	80 62       	ori	r24, 0x20	; 32
 244:	8b bf       	out	0x3b, r24	; 59
 246:	bc cf       	rjmp	.-136    	; 0x1c0 <main+0x36>

00000248 <__vector_2>:
		cmd_received = cmd_received << 1;
	}	
}

ISR(PCINT0_vect)
{	
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
		if(sb == TRUE && send == FALSE)
 256:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	51 f4       	brne	.+20     	; 0x272 <__stack+0x13>
 25e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <send>
 262:	81 11       	cpse	r24, r1
 264:	06 c0       	rjmp	.+12     	; 0x272 <__stack+0x13>
		{
			if(M_IN)	//PINB & (1<<PINB1)
 266:	b1 99       	sbic	0x16, 1	; 22
 268:	5b c0       	rjmp	.+182    	; 0x320 <__stack+0xc1>
				//ignorieren , Ruhephase am Ende eines Empfangenen Byte
			}
			else
			{
				//PORTB = PORTB ^ (1<<PB2);
				sb = FALSE;
 26a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
				TCNT1 = 0;
 26e:	1f bc       	out	0x2f, r1	; 47
 270:	57 c0       	rjmp	.+174    	; 0x320 <__stack+0xc1>
			}
		}
		else if(sb == FALSE && send == FALSE)
 272:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 276:	81 11       	cpse	r24, r1
 278:	53 c0       	rjmp	.+166    	; 0x320 <__stack+0xc1>
 27a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <send>
 27e:	81 11       	cpse	r24, r1
 280:	4f c0       	rjmp	.+158    	; 0x320 <__stack+0xc1>
		{	
			if(TCNT1 < ((MaP_BITRATE*2)-25))	// Abfragung damit nur die richtige Flanke erkannt wird. Jede nicht richtige wird ausgelassen
 282:	8f b5       	in	r24, 0x2f	; 47
 284:	8f 34       	cpi	r24, 0x4F	; 79
 286:	08 f4       	brcc	.+2      	; 0x28a <__stack+0x2b>
 288:	4b c0       	rjmp	.+150    	; 0x320 <__stack+0xc1>
				//PORTB = PORTB ^ (1<<PB3);
			}
			else
			{
				//PORTB = PORTB ^ (1<<PB3);
				TCNT1 = 0;
 28a:	1f bc       	out	0x2f, r1	; 47
				
				if(M_IN)		//PINB & (1<<PINB1),	PD1 abfragen, positive Flanke
 28c:	b1 9b       	sbis	0x16, 1	; 22
 28e:	13 c0       	rjmp	.+38     	; 0x2b6 <__stack+0x57>
				{
					bit_received = bit_received << 1;			//schieben um eins nach links
 290:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <bit_received>
 294:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <bit_received+0x1>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <bit_received+0x1>
 2a0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <bit_received>
					bit_received = bit_received | 0;
 2a4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <bit_received>
 2a8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <bit_received+0x1>
 2ac:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <bit_received+0x1>
 2b0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <bit_received>
 2b4:	13 c0       	rjmp	.+38     	; 0x2dc <__stack+0x7d>
				}
				else						//PD0 abfragen, negative Flanke
				{
					//PORTB = PORTB ^ (1<<PB3);
					bit_received = bit_received << 1;
 2b6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <bit_received>
 2ba:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <bit_received+0x1>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <bit_received+0x1>
 2c6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <bit_received>
					bit_received = bit_received | 1;			//schreibe eins hinein
 2ca:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <bit_received>
 2ce:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <bit_received+0x1>
 2d2:	81 60       	ori	r24, 0x01	; 1
 2d4:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <bit_received+0x1>
 2d8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <bit_received>
				}
				
				counter++;
 2dc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <counter>
 2e0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <counter+0x1>
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <counter+0x1>
 2ea:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <counter>
								
				if(counter >= 8)
 2ee:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <counter>
 2f2:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <counter+0x1>
 2f6:	08 97       	sbiw	r24, 0x08	; 8
 2f8:	98 f0       	brcs	.+38     	; 0x320 <__stack+0xc1>
							}
							else if(bit_received == 0b10111011)
							{
								PORTB = PORTB ^ (1<<PB3);
							}*/
					counter = 0;
 2fa:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <counter+0x1>
 2fe:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <counter>
					bf = TRUE;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <bf>
					bit_main = bit_received;
 308:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <bit_received>
 30c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <bit_received+0x1>
 310:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <bit_main+0x1>
 314:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <bit_main>
					bit_received = 0x00;
 318:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <bit_received+0x1>
 31c:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <bit_received>
					//PORTB = bit_main;
				}
			}
		}	
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <_exit>:
 32e:	f8 94       	cli

00000330 <__stop_program>:
 330:	ff cf       	rjmp	.-2      	; 0x330 <__stop_program>
